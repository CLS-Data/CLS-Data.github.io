---
layout: default
title: "Reshaping Data from Long to Wide (or Wide to Long)"
nav_order: 4
parent: MCS
format: docusaurus-md
---

# Introduction

In this tutorial, we will learn how to reshape data from long to wide (and vice versa) using the `tidyverse` package in `R`. We will use data on cohort member's height and weight collected in Sweeps 2-7 to demonstrate the process.

```{r}
#| warning: false
# Load Packages
library(tidyverse) # For data manipulation
library(haven) # For importing .dta files
library(glue) # For creating strings
```

```{r}
#| include: false
# setwd(Sys.getenv("mcs_fld"))
```

# Reshaping from Wide to Long

We begin by loading the data from each sweep and merging these together into a single wide format data frame; see [Combining Data Across Sweeps](https://cls-data.github.io/docs/mcs-merging_across_sweeps.html) for more details. Note, the names of the height and weight variables in Sweep 5 (`ECHTCMA0` and `ECWTCMAO`) diverge slightly from the rubric used for other sweeps (`[A-G]CHTCM00` and `[A-G]CWTCM00` where `[A-G]` denotes sweep), hence the need for the complex regular expression in `read_dta(col_select = ...)` function call. To simplify the names of the columns in the wide dataset, we rename the Sweep 5 variables so they follow the rubric for Sweeps 2-4 and 6-7.

```{r}
fups <- c(0, 3, 5, 7, 11, 14, 17)

load_height_wide <- function(sweep){
  fup <- fups[sweep]
  prefix <- LETTERS[sweep]
  
  glue("{fup}y/mcs{sweep}_cm_interview.dta") %>%
    read_dta(col_select = c("MCSID", matches("^.(CNUM00|CHTCM(A|0)0)"))) %>%
    rename(cnum = matches("CNUM00"))
}

df_wide <- map(2:7, load_height_wide) %>%
  reduce(~ full_join(.x, .y, by = c("MCSID", "cnum"))) %>%
  rename(ECHTCM00 = ECHTCMA0, ECWTCMA00 = ECWTCMA0)

str(df_wide)
```

`df_wide` has 14 columns. Besides, the identifiers, `MCSID` and `cnum`, there are 12 columns for height and weight measurements at each sweep. Each of these 12 columns is prefixed by a single letter indicating the sweep. We can reshape the dataset into long format (one row per person x sweep combination) using the `pivot_longer()` function so that the resulting data frame has five columns: two person identifiers, a variable for sweep, and variables for height and weight. We specify the columns to be reshaped using the `cols` argument, provide the new variable names in the `names_to` argument, and the pattern the existing column names take using the `names_pattern` argument. For `names_pattern` we specify `"(.)(.*)"`, which breaks the column name into two pieces: the first character (`"(.)"`) and the rest of the name (`"(.*)"`). As noted, the first character holds information on sweep. In `names_to`, `.value` is a placeholder for the second piece of the column name.

```{r}
df_long <- df_wide %>%
  pivot_longer(cols = matches("C(H|W)TCM00"),
               names_to = c("sweep", ".value"),
               names_pattern = "(.)(.*)")

df_long
```

# Reshaping from Long to Wide
We can also reshape the data from long to wide format using the `pivot_wider()` function. In this case, we want to create two new columns for each sweep: one for height and one for weight. We specify the columns to be reshaped using the `values_from` argument, provide the new column names in the `names_from` argument, and use the `names_glue` argument to specify the new column names. The `names_glue` argument uses curly braces (`{}`) to reference the values from the `names_from` and `.value` arguments. As we are specifying multiple columns in `values_from`, `.value` is a placeholder for the variable name.

```{r}
df_long %>%
  pivot_wider(names_from = sweep,
              values_from = matches("C(W|H)T"),
              names_glue = "{sweep}{.value}")
```

# Reshape a Cleaned Dataset from Long to Wide
It is likely that you will not just need to reshape raw data, but cleaned data too. In the next two sections we offer advice on naming variables so that they are easy to select and reshape in long or wide formats. First, let's clean the long dataset by converting the `cnum` and `sweep` columns to integers, creating a new column for follow-up time, and creating new `height` and `weight` variables that replace negative values in the raw height and weight data with `NA` (as well as giving these variables more easy-to-understand names).


```{r}
df_long_clean <- df_long %>%
  mutate(cnum = as.integer(cnum),
         sweep = match(sweep, LETTERS),
         fup = fups[sweep],
         height = ifelse(CHTCM00 > 0, CHTCM00, NA),
         weight = ifelse(CWTCM00 > 0, CWTCM00, NA)) %>%
  select(MCSID, cnum, fup, height, weight)
```

To reshape the clean data from long to wide format, we can use the `pivot_wider()` function as before. This time, we specify the columns to be reshaped using the `names_from` argument, provide the new column names in the `values_from` argument, and use the `names_glue` argument to specify the new column names. The `names_glue` argument uses curly braces (`{}`) to reference the values from the `names_from` and `.value` arguments. As we are specifying multiple columns in `values_from`, `.value` is a placeholder for the variable name.


```{r}
df_wide_clean <- df_long_clean %>%
  pivot_wider(names_from = fup,
              values_from = c(height, weight),
              names_glue = "{.value}_{fup}y")

df_wide_clean
```

# Reshape a Cleaned Dataset from Long to Wide
Finally, we can reshape the clean wide dataset back to long format using the `pivot_longer()` function. We specify the columns to be reshaped using the `cols` argument, provide the new variable names in the `names_to` argument, and the pattern the existing column names take using the `names_pattern` argument. For `names_pattern` we specify `"(.*)_(.*)y"`, which breaks the column name into two pieces: the variable name (`"(.*)"`), and the follow-up time (`"(.*)y"`). We also use the `names_transform` argument to convert the follow-up time to an integer.

```{r}
df_wide_clean %>%
  pivot_longer(cols = matches("_.*y$"),
               names_to = c(".value", "fup"),
               names_pattern = "(.*)_(\\d+)y$",
               names_transform = list(fup = as.integer))
```
