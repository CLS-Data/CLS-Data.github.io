---
layout: default
title: "Combining Data Across Sweeps"
nav_order: 4
parent: MCS
format: docusaurus-md
---

# Introduction

In this tutorial, we will learn how to merge, collapse and reshape various data structures from a given sweep of the Millennium Cohort Study (MCS) to create a dataset at the cohort member level (one row per cohort member). We will use the following packages:

```{r}
#| warning: false
# Load Packages
library(tidyverse) # For data manipulation
library(haven) # For importing .dta files
```

```{r}
#| include: false
# setwd(Sys.getenv("mcs_fld"))
```

The datasets we will use are:

```{r}
family <- read_dta("3y/mcs2_family_derived.dta") # One row per family
cm <- read_dta("3y/mcs2_cm_derived.dta") # One row per cohort member
parent <- read_dta("3y/mcs2_parent_derived.dta") # One row per parent (responding)
parent_cm <- read_dta("3y/mcs2_parent_cm_interview.dta") # One row per parent (responding) per cohort member
hhgrid <- read_dta("3y/mcs2_hhgrid.dta") # One row per household member
```

# Data Cleaning
We will create a small dataset that contains information on: family country of residence, cohort member's ethnicity, whether any parent reads to the child, the warmth of the relationship between the parent and the child, family social class (National Statistics Socio-economic Classification; NS-SEC), and mother's highest education level. Constructing and combining these variables involves restructing the data in various ways. 

We will begin with the simplest variables: cohort member's ethnicity and family country of residence. Cohort member's ethnicity is stored in a cohort-member level dataset already (`mcs2_cm_derived`), so it does not need further processing.

```{r}
df_ethnic_group <- cm %>%
  select(MCSID, BCNUM00, ethnic_group = BDC08E00)

df_ethnic_group
```


Family country of residence is stored in a family-level dataset (`mcs2_family_derived`). This also does not need any further processing at this stage. Later when we merge this with `df_ethnic_group`, we will perform a 1-to-many merge, so the data will be automatically repeated for cases where there are multiple cohort members in a family.

```{r}
df_country <- family %>%
  select(MCSID, country = BACTRY00)
```

Next, we will create a variable that indicates whether *any* parent reads to the cohort member We will use data from the `mcs2_parent_cm_interview` dataset, which contains a variable for the parent's reading habit (`BPOFRE00`). We first create a binary variable that indicates whether the parent reads to the cohort member at least once a week, and then create a summary variable indicating whether any (interviewed) parent reads (`max(parent_reads)`) using `summarise()` with `group_by(MCSID, BCNUM00)` to ensure this is calculated per cohort member. The result is a dataset with one row per cohort member with data on whether any parent reads to them.


```{r}
df_reads <- parent_cm %>%
  select(MCSID, BPNUM00, BCNUM00, BPOFRE00) %>%
  mutate(parent_reads = case_when(between(BPOFRE00, 1, 3) ~ 1,
                                  between(BPOFRE00, 4, 6) ~ 0)) %>%
  drop_na() %>%
  group_by(MCSID, BCNUM00) %>%
  summarise(parent_reads = max(parent_reads),
            .groups = "drop")

df_reads
```

We next create two separate variables for whether the responding parent has a warm relationship with the cohort member (`BPPIAW00`) again using the `mcs2_parent_cm_interview` dataset. As the data have one row per parent-cohort member combination, we need to create a variable indicating which parent is which, and then reshape the warmth variable from long to wide (one row per cohort member) using `pivot_wider()`. Again, result is a dataset with one row per cohort member with data on their relationship with each carer.

```{r}
df_warm <- parent_cm %>%
  select(MCSID, BCNUM00, BELIG00, BPPIAW00) %>%
  mutate(variable = ifelse(BELIG00 == 1, "main_warm", "secondary_warm"),
         value = case_when(BPPIAW00 == 5 ~ 1,
                           between(BPPIAW00, 1, 6) ~ 0)) %>%
  select(MCSID, BCNUM00, variable, value) %>%
  pivot_wider(names_from = variable, values_from = value)
```

Next, we want to create a variable for family social class (NS-SEC) using the `mcs2_parent_derived` dataset. This is a parent level dataset, and we will use the parent's NS-SEC (`BDD05S00`) and take the minimum value for each family (lower values of `BDD05S00` indicate higher social class).

```{r}
df_nssec <- parent %>%
  select(MCSID, BPNUM00, parent_nssec = BDD05S00) %>%
  mutate(parent_nssec = if_else(parent_nssec < 0, NA, parent_nssec)) %>%
  drop_na() %>%
  group_by(MCSID) %>%
  summarise(family_nssec = min(parent_nssec))

```

We will also create a variable for the mother's highest education level using the `mcs2_parent_derived` dataset. We will filter for mothers only (`BHCREL00 == 7` [Natural Parent] and `BHPSEX00 == 2` [Female]) and select the variable highest education level (`BDDNVQ00`). We will then merge these two variables with the other variables we have created so far. We use `right_join()`, which gives a row for every mother in the dataset, regardless of whether they have education data (`right_join()` fills variables with `NA` where not observed).

```{r}
df_mother <- hhgrid %>%
  select(MCSID, BPNUM00, BHCREL00, BHPSEX00) %>%
  filter(between(BPNUM00, 1, 99),
         BHCREL00 == 7,
         BHPSEX00 == 2) %>%
  distinct(MCSID, BPNUM00) %>%
  add_count(MCSID) %>%
  filter(n == 1) %>%
  select(MCSID, BPNUM00)

df_mother_edu <- parent %>%
  select(MCSID, BPNUM00, mother_nvq = BDDNVQ00) %>%
  right_join(df_mother, by = c("MCSID", "BPNUM00")) %>%
  select(-BPNUM00)
```

# Merging the Datasets
Now we have cleaned each variable, we can merge them together. The cleaned datasets are either at the family level (`df_country`, `df_nssec`, `df_mother_edu`) or cohort member level (`df_ethnic_group`, `df_reads`, `df_warm`). We begin with `df_ethnic_group` as this has all the cohort members (participating at Sweep 2) in it, and then use `left_join()` so these rows are kept (and no more are added). To merge with a family-level dataset, we use `left_join(..., by = "MCSID")` as `MCSID` is the unique identifier for each cohort member. For the cohort member level datasets, we use `left_join(..., by = c("MCSID", "BCNUM00"))` as the combination of `MCSID` and `BCNUM00` uniquely identifies cohort members.

```{r}
df_ethnic_group %>%
  left_join(df_country, by = "MCSID") %>%
  left_join(df_reads, by = c("MCSID", "BCNUM00")) %>%
  left_join(df_warm, by = c("MCSID", "BCNUM00")) %>%
  left_join(df_nssec, by = "MCSID") %>%
  left_join(df_mother_edu, by = "MCSID")
```